# MoAI-ADK Release Workflow
# @TASK:RELEASE-AUTOMATION-001
#
# Automated release pipeline that builds and publishes:
# - PyPI package for all platforms
# - Windows standalone executable
# - GitHub release with assets
# - Package manager manifests (winget, homebrew)

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.28)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.12'
  UV_VERSION: 'latest'

jobs:
  # Validate release prerequisites
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\.-]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

      - name: Check if version exists in pyproject.toml
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! grep -q "version = \"$VERSION\"" pyproject.toml; then
            echo "Version $VERSION not found in pyproject.toml"
            echo "Please update the version before releasing"
            exit 1
          fi

  # Build PyPI package
  build-package:
    name: Build PyPI Package
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run tests
        run: |
          uv run pytest tests/ -v --cov=moai_adk --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Build package
        run: |
          uv build

      - name: Validate package
        run: |
          uv run twine check dist/*

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  # Build Windows executable
  build-windows-exe:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Install PyInstaller
        run: |
          uv add --dev pyinstaller

      - name: Build executable
        run: |
          uv run pyinstaller moai-adk.spec --clean --noconfirm

      - name: Test executable
        run: |
          dist/moai-adk.exe --version

      - name: Create checksums
        run: |
          cd dist
          Get-FileHash -Algorithm SHA256 moai-adk.exe | ForEach-Object { "$($_.Hash.ToLower())  $($_.Path | Split-Path -Leaf)" } | Out-File -Encoding ascii moai-adk.exe.sha256
          Get-FileHash -Algorithm MD5 moai-adk.exe | ForEach-Object { "$($_.Hash.ToLower())  $($_.Path | Split-Path -Leaf)" } | Out-File -Encoding ascii moai-adk.exe.md5

      - name: Upload executable artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-executable
          path: |
            dist/moai-adk.exe
            dist/moai-adk.exe.sha256
            dist/moai-adk.exe.md5
          retention-days: 30

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-package, build-windows-exe]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Download Windows executable
        uses: actions/download-artifact@v4
        with:
          name: windows-executable
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          # Extract changelog for this version
          if [[ -f "CHANGELOG.md" ]]; then
            awk "/^## \[?$VERSION\]?/ {flag=1; next} /^## / {flag=0} flag" CHANGELOG.md > release_notes.md
          else
            echo "## Changes in v$VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "- See full changelog in repository history" >> release_notes.md
          fi

          # Add installation instructions
          cat >> release_notes.md << 'EOF'

          ## 🚀 Installation

          ### Quick Install (All Platforms)
          ```bash
          # Using uv (recommended)
          uvx --from moai-adk moai-adk init

          # Using pip
          pip install moai-adk
          ```

          ### Windows (Standalone)
          Download `moai-adk.exe` and run directly - no Python installation required!

          ### Package Managers
          ```bash
          # Windows (coming soon)
          winget install MoAILabs.MoAI-ADK
          ```

          ## 📋 Checksums
          - SHA256: See `.sha256` files
          - MD5: See `.md5` files
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: MoAI-ADK ${{ needs.validate.outputs.tag }}
          body_path: release_notes.md
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |
            dist/*.whl
            dist/*.tar.gz
            dist/moai-adk.exe
            dist/moai-adk.exe.sha256
            dist/moai-adk.exe.md5
          generate_release_notes: true

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate, build-package, create-release]
    environment: release
    permissions:
      id-token: write
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
          verbose: true

  # Update package managers
  update-package-managers:
    name: Update Package Managers
    runs-on: ubuntu-latest
    needs: [validate, create-release, publish-pypi]
    if: success() && !contains(needs.validate.outputs.version, '-')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for PyPI availability
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "Waiting for PyPI to make v$VERSION available..."

          for i in {1..10}; do
            if curl -s "https://pypi.org/pypi/moai-adk/$VERSION/json" | grep -q "\"version\": \"$VERSION\""; then
              echo "Package is available on PyPI"
              break
            fi
            echo "Attempt $i/10: Package not yet available, waiting 30 seconds..."
            sleep 30
          done

      - name: Create winget manifest PR
        uses: vedantmgoyal2009/winget-releaser@v2
        with:
          identifier: MoAILabs.MoAI-ADK
          token: ${{ secrets.WINGET_TOKEN }}
          version: ${{ needs.validate.outputs.version }}

  # Post-release notifications
  notify:
    name: Post-release Notifications
    runs-on: ubuntu-latest
    needs: [validate, create-release, publish-pypi]
    if: always()
    steps:
      - name: Notify success
        if: needs.create-release.result == 'success' && needs.publish-pypi.result == 'success'
        run: |
          echo "🎉 Release ${{ needs.validate.outputs.tag }} completed successfully!"
          echo "📦 PyPI: https://pypi.org/project/moai-adk/${{ needs.validate.outputs.version }}/"
          echo "📥 GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}"

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Release ${{ needs.validate.outputs.tag }} failed!"
          echo "Please check the workflow logs for details."