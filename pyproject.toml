[build-system]
# @TASK:BUILD-SYSTEM-001 Modern build system with uv compatibility
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "moai-adk"
version = "0.1.17"
description = "ðŸ—¿ MoAI-ADK: Modu-AI Agentic Development Toolkit for Claude Code Integration"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "MoAI Labs", email = "labs@mo.ai.kr"}
]
keywords = ["ai", "claude-code", "development", "automation", "cli"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    "colorama>=0.4.6",
    "click>=8.0.0",
    "toml>=0.10.0",
    "watchdog>=3.0.0",
    "jsonschema>=4.0.0",
    "gitpython>=3.1.0",
    "jinja2>=3.0.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "isort>=5.10",
    "mypy>=1.0",
    "flake8>=5.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "pyyaml>=6.0.0",
]

[project.urls]
"Homepage" = "https://github.com/modu-ai/moai-adk"
"Bug Reports" = "https://github.com/modu-ai/moai-adk/issues"
"Source" = "https://github.com/modu-ai/moai-adk"
"Documentation" = "https://docs.moai-adk.dev"

[project.scripts]
moai = "moai_adk.cli:main"
moai-install = "moai_adk.install.post_install:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["moai_adk*"]
exclude = ["tests*", "docs*", "__pycache__*", "legacy*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
"moai_adk" = [
    "py.typed",
    "resources/VERSION",
    # Core templates (minimized for 0.2.1)
    "resources/templates/CLAUDE.md",
    "resources/templates/.claude/settings.json",
    "resources/templates/.claude/agents/moai/*.md",
    "resources/templates/.claude/commands/moai/*.md",
    "resources/templates/.claude/hooks/moai/*.py",
    "resources/templates/.claude/output-styles/*.md",
    "resources/templates/.claude/memory/**/*",
    "resources/templates/.moai/**/*",
    "resources/templates/.github/workflows/*.yml",
    "resources/templates/scripts/*",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | legacy
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
# @TASK:RUFF-CONFIG-001 Ruff linter configuration for global code quality
target-version = "0.1.17"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pycaches__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "legacy",
    "resources/templates",  # Exclude template files
]

[tool.ruff.lint]
# @TASK:LINT-RULES-001 Linting rules configuration
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "I",      # isort
    "N",      # pep8-naming
    "C4",     # flake8-comprehensions
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "T201",   # Print found (allow print statements)
    "N806",   # Variable in function should be lowercase (for compatibility)
]

[tool.ruff.lint.mccabe]
# @TASK:COMPLEXITY-CHECK-001 McCabe complexity checking
max-complexity = 10  # TRUST principle: keep functions simple

[tool.ruff.lint.isort]
# @TASK:IMPORT-SORTING-001 Import sorting configuration
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["moai_adk"]
known-third-party = ["click", "colorama", "pytest", "pydantic"]

[tool.mypy]
python_version = "0.1.17"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.bandit]
# @TASK:SECURITY-LINT-001 Security linting with bandit
exclude_dirs = ["tests", "legacy", "resources/templates"]
skips = ["B101", "B601"]  # Skip assert and shell injection for testing

[tool.coverage.run]
# @TASK:COVERAGE-001 Code coverage configuration
source = ["src/moai_adk"]
omit = [
    "*/tests/*",
    "*/legacy/*",
    "*/resources/templates/*",
    "*/__init__.py",
]

[tool.coverage.report]
# @TASK:COVERAGE-REPORT-001 Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstract",
]
show_missing = true
precision = 2

# @TASK:UV-TOOL-001 uv tool management configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "mypy>=1.18.0",
    "bandit>=1.8.0",
    "pre-commit>=4.0.0",
    # Keep ruff as dependency for CI/CD compatibility
    "ruff>=0.13.0",
]

# @TASK:SCRIPTS-001 Project automation scripts
[tool.uv.scripts]
lint = "ruff check src/moai_adk"
lint-fix = "ruff check src/moai_adk --fix"
format = "ruff format src/moai_adk"
format-check = "ruff format src/moai_adk --check"
typecheck = "mypy src/moai_adk"
security = "bandit -r src/moai_adk"
test = "pytest tests/"
test-cov = "pytest --cov=moai_adk --cov-report=html --cov-report=term tests/"
quality = ["lint", "format-check", "typecheck", "security"]
all-checks = ["quality", "test-cov"]
