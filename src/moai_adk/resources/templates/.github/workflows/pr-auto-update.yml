name: PR Auto-Update for GitFlow

# MoAI-ADK GitFlow PR 자동 업데이트
# 커밋 푸시 시 관련 PR을 자동으로 업데이트

on:
  push:
    branches:
      - 'feature/SPEC-*'

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  update-pr:
    name: 📝 PR 자동 업데이트
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop'

    steps:
      - name: 🔍 코드 체크아웃
        uses: actions/checkout@v4

      - name: 📝 SPEC ID 및 단계 분석
        id: analyze
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Branch: $BRANCH_NAME"

          # SPEC ID 추출
          if [[ $BRANCH_NAME =~ ^feature/SPEC-([0-9]+) ]]; then
            SPEC_ID="SPEC-${BASH_REMATCH[1]}"
            echo "spec-id=$SPEC_ID" >> $GITHUB_OUTPUT
            echo "🎯 SPEC ID: $SPEC_ID"
          else
            echo "❌ SPEC 브랜치가 아닙니다: $BRANCH_NAME"
            exit 1
          fi

          # 최근 커밋으로 단계 판단
          COMMIT_MSG="$(git log -1 --pretty=format:'%s')"
          echo "Recent commit: $COMMIT_MSG"

          STAGE="unknown"
          if [[ $COMMIT_MSG =~ feat\($SPEC_ID\):.*initial.*requirements ]]; then
            STAGE="SPEC 초안"
          elif [[ $COMMIT_MSG =~ feat\($SPEC_ID\):.*user.*stories ]]; then
            STAGE="User Stories"
          elif [[ $COMMIT_MSG =~ feat\($SPEC_ID\):.*acceptance.*criteria ]]; then
            STAGE="수락 기준"
          elif [[ $COMMIT_MSG =~ feat\($SPEC_ID\):.*Complete ]]; then
            STAGE="SPEC 완료"
          elif [[ $COMMIT_MSG =~ feat\($SPEC_ID\):.*Constitution ]]; then
            STAGE="Constitution 검증"
          elif [[ $COMMIT_MSG =~ test\($SPEC_ID\):.*failing.*RED ]]; then
            STAGE="TDD RED"
          elif [[ $COMMIT_MSG =~ feat\($SPEC_ID\):.*GREEN ]]; then
            STAGE="TDD GREEN"
          elif [[ $COMMIT_MSG =~ refactor\($SPEC_ID\):.*REFACTOR ]]; then
            STAGE="TDD REFACTOR"
          elif [[ $COMMIT_MSG =~ docs\($SPEC_ID\): ]]; then
            STAGE="문서 동기화"
          fi

          echo "stage=$STAGE" >> $GITHUB_OUTPUT
          echo "🔄 현재 단계: $STAGE"

      - name: 📊 진행률 계산
        id: progress
        run: |
          SPEC_ID="${{ steps.analyze.outputs.spec-id }}"
          STAGE="${{ steps.analyze.outputs.stage }}"

          # 단계별 진행률 매핑
          case "$STAGE" in
            "SPEC 초안") PROGRESS=10 ;;
            "User Stories") PROGRESS=20 ;;
            "수락 기준") PROGRESS=25 ;;
            "SPEC 완료") PROGRESS=25 ;;
            "Constitution 검증") PROGRESS=35 ;;
            "TDD RED") PROGRESS=50 ;;
            "TDD GREEN") PROGRESS=70 ;;
            "TDD REFACTOR") PROGRESS=85 ;;
            "문서 동기화") PROGRESS=95 ;;
            *) PROGRESS=5 ;;
          esac

          echo "progress=$PROGRESS" >> $GITHUB_OUTPUT
          echo "📈 진행률: $PROGRESS%"

      - name: 🎨 PR 진행 상태 바 생성
        id: progress-bar
        run: |
          PROGRESS="${{ steps.progress.outputs.progress }}"

          # ASCII 진행 상태 바 생성 (20글자)
          FILLED=$((PROGRESS / 5))
          EMPTY=$((20 - FILLED))

          PROGRESS_BAR=""
          for i in $(seq 1 $FILLED); do
            PROGRESS_BAR+="█"
          done
          for i in $(seq 1 $EMPTY); do
            PROGRESS_BAR+="░"
          done

          echo "progress-bar=$PROGRESS_BAR" >> $GITHUB_OUTPUT
          echo "Progress bar: $PROGRESS_BAR"

      - name: 💬 PR 댓글 업데이트
        uses: actions/github-script@v6
        with:
          script: |
            const specId = '${{ steps.analyze.outputs.spec-id }}';
            const stage = '${{ steps.analyze.outputs.stage }}';
            const progress = '${{ steps.progress.outputs.progress }}';
            const progressBar = '${{ steps.progress-bar.outputs.progress-bar }}';
            const commitSha = context.sha.substring(0, 7);

            // PR 목록 조회
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              state: 'open'
            });

            if (prs.data.length === 0) {
              console.log('❌ 연관된 PR을 찾을 수 없습니다.');
              return;
            }

            const pr = prs.data[0];
            console.log(`📝 PR 발견: #${pr.number} - ${pr.title}`);

            // 업데이트 댓글 내용 생성
            const updateComment = `## 🔄 ${stage} 단계 완료

            **진행률**: ${progress}% \`${progressBar}\`

            ### 📋 최근 변경사항
            - **커밋**: \`${commitSha}\`
            - **단계**: ${stage}
            - **시간**: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

            ### 🎯 다음 단계
            ${
              progress < 25 ? '- SPEC 문서 작성 계속' :
              progress < 85 ? '- TDD 구현 진행' :
              '- 문서 동기화 및 PR 준비'
            }

            ---
            🤖 MoAI-ADK v0.2.1 자동 업데이트 | Branch: \`${context.ref.replace('refs/heads/', '')}\``;

            // 기존 자동 업데이트 댓글 찾기
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
            });

            const existingComment = comments.data.find(
              comment => comment.body.includes('🤖 MoAI-ADK v0.2.1 자동 업데이트')
            );

            if (existingComment) {
              // 기존 댓글 업데이트
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: updateComment
              });
              console.log('✅ 기존 댓글 업데이트 완료');
            } else {
              // 새 댓글 생성
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: updateComment
              });
              console.log('✅ 새 댓글 생성 완료');
            }

      - name: 🏷️ PR 라벨 업데이트
        uses: actions/github-script@v6
        with:
          script: |
            const stage = '${{ steps.analyze.outputs.stage }}';
            const progress = parseInt('${{ steps.progress.outputs.progress }}');

            // PR 조회
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              state: 'open'
            });

            if (prs.data.length === 0) {
              return;
            }

            const pr = prs.data[0];

            // 현재 라벨 제거 (progress 관련만)
            const currentLabels = pr.labels.map(label => label.name);
            const labelsToRemove = currentLabels.filter(label =>
              label.startsWith('progress:') ||
              label.startsWith('stage:') ||
              label === 'draft' ||
              label === 'ready-for-review'
            );

            // 새 라벨 결정
            const newLabels = [];

            // 진행률 라벨
            if (progress < 25) {
              newLabels.push('stage:spec');
              newLabels.push('progress:0-25');
            } else if (progress < 50) {
              newLabels.push('stage:constitution');
              newLabels.push('progress:25-50');
            } else if (progress < 85) {
              newLabels.push('stage:build');
              newLabels.push('progress:50-85');
            } else {
              newLabels.push('stage:sync');
              newLabels.push('progress:85-100');
            }

            // Draft/Ready 상태
            if (progress >= 95) {
              newLabels.push('ready-for-review');
            } else {
              newLabels.push('draft');
            }

            // 라벨 업데이트
            const finalLabels = currentLabels
              .filter(label => !labelsToRemove.includes(label))
              .concat(newLabels);

            await github.rest.issues.setLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: finalLabels
            });

            console.log(`🏷️ 라벨 업데이트: ${newLabels.join(', ')}`);

      - name: 🎯 PR Ready 상태 변경 (95% 이상)
        if: steps.progress.outputs.progress >= 95
        uses: actions/github-script@v6
        with:
          script: |
            // PR 조회
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              state: 'open'
            });

            if (prs.data.length === 0) {
              return;
            }

            const pr = prs.data[0];

            if (pr.draft) {
              // Draft에서 Ready로 변경
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                draft: false
              });

              console.log('✅ PR이 Ready for Review 상태로 변경되었습니다.');
            }