name: MoAI-ADK GitFlow CI/CD Pipeline

# MoAI-ADK 0.2.1 GitFlow 통합 파이프라인
# Feature 브랜치, develop, main 브랜치에서 자동 실행

on:
  push:
    branches:
      - main
      - develop
      - 'feature/SPEC-*'
      - 'release/*'
      - 'hotfix/*'
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # 품질 검증 Job (모든 브랜치)
  # =============================================================================
  quality-check:
    name: 📋 품질 검증
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.ref != 'refs/heads/main'

    outputs:
      spec-id: ${{ steps.extract-spec.outputs.spec-id }}
      is-spec-branch: ${{ steps.extract-spec.outputs.is-spec-branch }}
      is-build-stage: ${{ steps.check-stage.outputs.is-build-stage }}

    steps:
      - name: 🔍 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 SPEC ID 추출
        id: extract-spec
        run: |
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "Branch: $BRANCH_NAME"

          if [[ $BRANCH_NAME =~ ^feature/SPEC-([0-9]+) ]]; then
            SPEC_ID="SPEC-${BASH_REMATCH[1]}"
            echo "spec-id=$SPEC_ID" >> $GITHUB_OUTPUT
            echo "is-spec-branch=true" >> $GITHUB_OUTPUT
            echo "🎯 SPEC ID 감지: $SPEC_ID"
          else
            echo "is-spec-branch=false" >> $GITHUB_OUTPUT
            echo "📝 일반 브랜치: $BRANCH_NAME"
          fi

      - name: 🔍 작업 단계 확인
        id: check-stage
        run: |
          # 최근 커밋 메시지로 단계 판단
          RECENT_COMMIT=$(git log -1 --pretty=format:"%s")
          echo "Recent commit: $RECENT_COMMIT"

          if [[ $RECENT_COMMIT =~ ^(test\(|feat\(.*\):.*(GREEN|RED|REFACTOR)) ]]; then
            echo "is-build-stage=true" >> $GITHUB_OUTPUT
            echo "🔨 BUILD 단계 감지"
          else
            echo "is-build-stage=false" >> $GITHUB_OUTPUT
            echo "📋 SPEC 단계 또는 기타"
          fi

      - name: 🐍 Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Python 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy bandit pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e .; fi

      - name: 🔍 코드 품질 검사 (Ruff)
        run: |
          echo "🧹 Ruff 린팅 실행..."
          ruff check . --output-format=github
          echo "✨ Ruff 포맷팅 검사..."
          ruff format --check .

      - name: 🔍 타입 검사 (MyPy)
        run: |
          echo "🎯 MyPy 타입 검사 실행..."
          mypy src/ --ignore-missing-imports || true

      - name: 🔒 보안 검사 (Bandit)
        run: |
          echo "🛡️ Bandit 보안 검사 실행..."
          bandit -r src/ -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            echo "📊 보안 검사 결과:"
            cat bandit-report.json | jq '.results | length' || echo "0"
          fi

      - name: 📋 SPEC 문서 검증 (SPEC 브랜치만)
        if: steps.extract-spec.outputs.is-spec-branch == 'true'
        run: |
          SPEC_ID="${{ steps.extract-spec.outputs.spec-id }}"
          SPEC_DIR=".moai/specs/$SPEC_ID"

          echo "🎯 SPEC 문서 검증: $SPEC_ID"

          # 필수 파일 존재 확인
          MISSING_FILES=()
          for file in "spec.md" "user-stories.md" "acceptance.md"; do
            if [ ! -f "$SPEC_DIR/$file" ]; then
              MISSING_FILES+=("$file")
            fi
          done

          if [ ${#MISSING_FILES[@]} -gt 0 ]; then
            echo "❌ 누락된 SPEC 파일: ${MISSING_FILES[*]}"
            exit 1
          fi

          # EARS 키워드 검증
          EARS_COUNT=$(grep -c -E "(WHEN|IF|WHILE|WHERE|UBIQUITOUS)" "$SPEC_DIR/spec.md" || echo "0")
          if [ $EARS_COUNT -lt 3 ]; then
            echo "⚠️ EARS 키워드가 부족합니다 (최소 3개 필요, 현재 $EARS_COUNT개)"
          fi

          # User Stories 개수 확인
          US_COUNT=$(grep -c "^US-" "$SPEC_DIR/user-stories.md" || echo "0")
          if [ $US_COUNT -lt 1 ]; then
            echo "❌ User Stories가 없습니다"
            exit 1
          fi

          echo "✅ SPEC 검증 완료: EARS($EARS_COUNT), US($US_COUNT)"

  # =============================================================================
  # 테스트 Job (BUILD 단계)
  # =============================================================================
  test-suite:
    name: 🧪 테스트 스위트
    runs-on: ubuntu-latest
    needs: quality-check
    if: needs.quality-check.outputs.is-build-stage == 'true'

    steps:
      - name: 🔍 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🐍 Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 의존성 설치 및 캐시
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 테스트 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e .; fi

      - name: 🧪 단위 테스트 실행
        run: |
          echo "🔬 단위 테스트 실행 중..."
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: 🧪 통합 테스트 실행
        if: always()
        run: |
          echo "🔗 통합 테스트 실행 중..."
          pytest tests/integration/ -v --tb=short || true

      - name: 📊 코드 커버리지 업로드
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📈 커버리지 검증
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print(round(float(ET.parse('coverage.xml').getroot().get('line-rate')) * 100, 2))" || echo "0")
          echo "📊 현재 커버리지: $COVERAGE%"

          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ 커버리지가 80% 미만입니다 (현재: $COVERAGE%)"
            echo "::warning::테스트 커버리지가 목표치(80%)에 미달합니다"
          else
            echo "✅ 커버리지 목표 달성: $COVERAGE%"
          fi

  # =============================================================================
  # Constitution 검증 Job
  # =============================================================================
  constitution-check:
    name: 🏛️ Constitution 검증
    runs-on: ubuntu-latest
    needs: quality-check
    if: needs.quality-check.outputs.is-spec-branch == 'true'

    steps:
      - name: 🔍 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🏛️ Constitution 5원칙 검증
        run: |
          SPEC_ID="${{ needs.quality-check.outputs.spec-id }}"
          echo "🎯 Constitution 검증: $SPEC_ID"

          # 1. Simplicity - 파일 개수 제한 (예: 10개 이하)
          FILE_COUNT=$(find .moai/specs/$SPEC_ID -name "*.md" | wc -l)
          if [ $FILE_COUNT -gt 10 ]; then
            echo "❌ Simplicity 위반: 파일 개수 초과 ($FILE_COUNT/10)"
            exit 1
          fi
          echo "✅ Simplicity: 파일 개수 적절 ($FILE_COUNT/10)"

          # 2. Architecture - 모듈형 구조 확인
          if [ -f ".moai/specs/$SPEC_ID/spec.md" ]; then
            MODULE_COUNT=$(grep -c -i "module\|component\|service" ".moai/specs/$SPEC_ID/spec.md" || echo "0")
            if [ $MODULE_COUNT -gt 0 ]; then
              echo "✅ Architecture: 모듈형 설계 확인 ($MODULE_COUNT개)"
            else
              echo "⚠️ Architecture: 모듈형 설계 권장"
            fi
          fi

          # 3. Testing - 테스트 관련 언급 확인
          TEST_MENTIONS=$(grep -c -i "test\|spec\|scenario" ".moai/specs/$SPEC_ID/" -r || echo "0")
          if [ $TEST_MENTIONS -lt 5 ]; then
            echo "⚠️ Testing: 테스트 관련 내용 부족 ($TEST_MENTIONS개)"
          else
            echo "✅ Testing: 테스트 계획 적절 ($TEST_MENTIONS개)"
          fi

          # 4. Observability - 로깅/모니터링 언급
          OBS_COUNT=$(grep -c -i "log\|monitor\|metric\|trace" ".moai/specs/$SPEC_ID/" -r || echo "0")
          echo "✅ Observability: 관찰가능성 고려 ($OBS_COUNT개)"

          # 5. Versioning - 버전 관리 체계
          echo "✅ Versioning: GitFlow 자동 적용됨"

          echo "🏛️ Constitution 5원칙 검증 완료!"

  # =============================================================================
  # 배포 준비 Job (main 브랜치)
  # =============================================================================
  deploy-prepare:
    name: 🚀 배포 준비
    runs-on: ubuntu-latest
    needs: [quality-check, constitution-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 🔍 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Release Notes 생성
        run: |
          echo "📝 릴리스 노트 생성 중..."

          # 마지막 태그 이후 변경사항 조회
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          # SPEC 변경사항 추출
          SPEC_CHANGES=$(git log $LAST_TAG..HEAD --oneline --grep="feat(SPEC-" || echo "")
          BUILD_CHANGES=$(git log $LAST_TAG..HEAD --oneline --grep="feat\|test\|refactor" || echo "")

          # Release notes 파일 생성
          cat > RELEASE_NOTES.md << EOF
          # Release Notes

          ## 📋 SPEC 변경사항
          $SPEC_CHANGES

          ## 🔨 구현 변경사항
          $BUILD_CHANGES

          ## 🎯 자동 생성됨
          Generated by MoAI-ADK GitFlow v0.2.1
          EOF

          echo "✅ Release Notes 생성 완료"
          cat RELEASE_NOTES.md

      - name: 🏷️ 버전 태그 생성
        if: success()
        run: |
          # 버전 자동 증가 로직 (예시)
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/v//' || echo "0.2.0")
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"

          # 패치 버전 증가
          PATCH=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"

          echo "🏷️ 새 버전: v$NEW_VERSION"
          git config user.name "MoAI-ADK Bot"
          git config user.email "moai-adk@noreply.com"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION - Auto-generated by MoAI-ADK GitFlow"
          git push origin "v$NEW_VERSION"

  # =============================================================================
  # 알림 및 리포팅 Job
  # =============================================================================
  notification:
    name: 📢 결과 알림
    runs-on: ubuntu-latest
    needs: [quality-check, constitution-check, test-suite]
    if: always()

    steps:
      - name: 📊 파이프라인 결과 요약
        run: |
          echo "## 🎯 MoAI-ADK GitFlow Pipeline 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.quality-check.result }}" == "success" ]; then
            echo "✅ **품질 검증**: 통과" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **품질 검증**: 실패" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.constitution-check.result }}" == "success" ]; then
            echo "✅ **Constitution 검증**: 통과" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.constitution-check.result }}" == "skipped" ]; then
            echo "⏭️ **Constitution 검증**: 건너뜀" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Constitution 검증**: 실패" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-suite.result }}" == "success" ]; then
            echo "✅ **테스트 스위트**: 통과" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-suite.result }}" == "skipped" ]; then
            echo "⏭️ **테스트 스위트**: 건너뜀" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **테스트 스위트**: 실패" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**브랜치**: \`${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}\`" >> $GITHUB_STEP_SUMMARY
          echo "**커밋**: \`${GITHUB_SHA:0:7}\`" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.quality-check.outputs.spec-id }}" != "" ]; then
            echo "**SPEC ID**: \`${{ needs.quality-check.outputs.spec-id }}\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🤖 MoAI-ADK v0.2.1 GitFlow Pipeline" >> $GITHUB_STEP_SUMMARY

      - name: 💬 PR 댓글 업데이트
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const summary = `## 🎯 MoAI-ADK Pipeline 결과

            | 단계 | 상태 | 결과 |
            |------|------|------|
            | 품질 검증 | ${{ needs.quality-check.result }} | ${{ needs.quality-check.result == 'success' && '✅' || '❌' }} |
            | Constitution | ${{ needs.constitution-check.result }} | ${{ needs.constitution-check.result == 'success' && '✅' || needs.constitution-check.result == 'skipped' && '⏭️' || '❌' }} |
            | 테스트 | ${{ needs.test-suite.result }} | ${{ needs.test-suite.result == 'success' && '✅' || needs.test-suite.result == 'skipped' && '⏭️' || '❌' }} |

            **다음 단계**: ${
              '${{ needs.quality-check.outputs.is-spec-branch }}' === 'true'
                ? '/moai:2-build ${{ needs.quality-check.outputs.spec-id }}'
                : '문서 업데이트 및 배포 준비'
            }

            ---
            🤖 MoAI-ADK v0.2.1 GitFlow CI/CD | 커밋: \`${context.sha.substring(0, 7)}\``;

            // 기존 댓글 찾기 및 업데이트
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(
              comment => comment.body.includes('🎯 MoAI-ADK Pipeline 결과')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }